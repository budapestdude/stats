name: Chess Stats CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # Test and Quality Checks
  test:
    name: Test & Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        continue-on-error: true
        
      - name: Run tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
  # Build and Test Docker Images
  build:
    name: Build & Test Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and test development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: false
          tags: chess-stats:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test development container
        run: |
          docker run -d --name test-container -p 3010:3010 chess-stats:dev
          sleep 30
          curl -f http://localhost:3010/health || exit 1
          docker stop test-container
          
      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start test database
        run: |
          # Create minimal test database
          mkdir -p otb-database
          sqlite3 otb-database/complete-tournaments.db "
            CREATE TABLE games (
              id INTEGER PRIMARY KEY,
              white_player TEXT,
              black_player TEXT,
              result TEXT,
              date TEXT,
              eco TEXT,
              opening TEXT
            );
            INSERT INTO games VALUES 
            (1, 'Test Player', 'Another Player', '1-0', '2024-01-01', 'B90', 'Sicilian Defense');
          "
          
      - name: Run performance tests
        run: |
          node simple-server-pooled.js &
          SERVER_PID=$!
          sleep 10
          node test-performance.js
          kill $SERVER_PID
          
      - name: Store performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json
          
  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: chess-stats:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, performance, security]
    environment: staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
          # Add actual deployment commands here
          
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging"
          # Add smoke test commands
          
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, performance, security]
    environment: production
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # Add actual deployment commands here
          
      - name: Run health checks
        run: |
          echo "üè• Running production health checks"
          # Add health check commands
          
      - name: Create deployment record
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment-url: https://chess-stats.example.com
          environment: production
          
  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old images
        run: |
          echo "üßπ Cleaning up old container images"
          # Add cleanup commands for old images/artifacts